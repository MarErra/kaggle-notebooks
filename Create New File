{"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"codemirror_mode":"r","file_extension":".r","mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"4.4.0"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12578354,"sourceType":"datasetVersion","datasetId":7943880}],"dockerImageVersionId":30749,"isInternetEnabled":true,"language":"r","sourceType":"notebook","isGpuEnabled":false},"papermill":{"default_parameters":{},"duration":120.266883,"end_time":"2025-07-28T18:12:12.233905","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-07-28T18:10:11.967022","version":"2.6.0"}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/marerra/cyclistic-google-data-analytics-capstone?scriptVersionId=253095834\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"- [1. INTRODUCTION](#1-introduction)  \n  - [1.1: SCENARIO](#11-scenario)\n- [2. ASK](#2-ask)\n- [3. PREPARE](#3-prepare)  \n  - [3.1: COLLECT DATA](#31-collect-data)  \n  - [3.2: COMBINE DATA INTO A SINGLE DATAFRAME](#32-combine-data-into-a-single-dataframe)  \n  - [3.3: INITIAL INSPECTION TO UNDERSTAND THE DATA STRUCTURE](#33-initial-inspection-to-understand-the-data-structure)\n- [4. PROCESS](#4-process)  \n  - [4.1: CLEAN UP TO PREPARE FOR ANALYSIS](#41-clean-up-to-prepare-for-analysis)  \n    - [4.1.1: CHECK FOR DATA INCONSISTENCIES IN THE DIFFERENT COLUMNS](#411-check-for-data-inconsistencies-in-the-different-columns)  \n  - [4.2: ADD DATA TO PREPARE FOR ANALYSIS](#42-add-data-to-prepare-for-analysis)  \n  - [4.3: DATA CLEANSING CHANGE LOG](#43-data-cleansing-change-log)\n- [5. ANALYZE](#5-analyze)  \n  - [5.1: CASUAL vs MEMBER: Nº OF RIDES AND RIDE_DURATION](#51-casual-vs-member-n-of-rides-and-ride_duration)  \n  - [5.2: CASUAL vs MEMBER: Nº OF RIDES AND DURATION BY DAYS OF THE WEEK](#52-casual-vs-member-n-of-rides-and-duration-by-days-of-the-week)  \n  - [5.3: CASUAL vs MEMBER: Nº OF RIDES AND DURATION BY HOURS OF THE DAY](#53-casual-vs-member-n-of-rides-and-duration-by-hours-of-the-day)  \n  - [5.4: CASUAL vs MEMBER: Nº OF RIDES AND DURATION BY MONTHS](#54-casual-vs-member-n-of-rides-and-duration-by-months)  \n  - [5.5: CASUAL vs MEMBER: TYPE OF BIKES](#55-casual-vs-member-type-of-bikes)  \n  - [5.6: CASUAL vs MEMBER: TYPE OF BIKES BY MONTH](#56-casual-vs-member-type-of-bikes-by-month)  \n  - [5.7: CHECK OUT THE 10 MOST POPULAR STATIONS BY TYPE OF USER](#57-check-out-the-10-most-popular-stations-by-type-of-user)  \n  - [5.8: CHECK OUT THE 5 MOST POPULAR ROUTES](#58-check-out-the-5-most-popular-routes)\n- [6. SHARE THE FINDINGS](#6-share-the-findings)  \n  - [6.1: FINDING 1 (CASUAL vs MEMBER: Nº OF RIDES AND RIDE_DURATION)](#61-finding-1-casual-vs-member-n-of-rides-and-ride_duration)  \n  - [6.2: FINDING 2 (CASUAL vs MEMBER: Nº OF RIDES AND DURATION BY MONTHS)](#62-finding-2-casual-vs-member-n-of-rides-and-duration-by-months)  \n  - [6.3: FINDING 3 (CASUAL vs MEMBER: Nº OF RIDES AND DURATION BY DAYS OF THE WEEK)](#63-finding-3-casual-vs-member-n-of-rides-and-duration-by-days-of-the-week)  \n  - [6.4: FINDING 4 (CASUAL vs MEMBER: Nº OF RIDES AND DURATION BY HOURS OF THE DAY)](#64-finding-4-casual-vs-member-n-of-rides-and-duration-by-hours-of-the-day)  \n  - [6.5: FINDING 5 (CASUAL vs MEMBER: TYPE OF BIKES)](#65-finding-5-casual-vs-member-type-of-bikes)  \n  - [6.6: FINDING 6 (CASUAL vs MEMBER: TYPE OF BIKES BY MONTH)](#66-finding-6-casual-vs-member-type-of-bikes-by-month)  \n  - [6.7: FINDING 7 (CHECK OUT THE 10 MOST POPULAR STATIONS BY TYPE OF USERS)](#67-finding-7-check-out-the-10-most-popular-stations-by-type-of-users)\n- [7. ACT](#7-act)\n\n","metadata":{"papermill":{"duration":0.014607,"end_time":"2025-07-28T18:10:15.717784","exception":false,"start_time":"2025-07-28T18:10:15.703177","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"## 1. INTRODUCTION\n\nThis notebook is a Case Study of [Google Data Analytics Professional Certificate](https://www.coursera.org/professional-certificates/google-data-analytics//). The objective of this study is to follow the steps of the data analysis process learned in the course through a real case. \n\n### 1.1 SCENARIO\n\nCyclistic is fictional bike-share company located in Chicago. \n\nThe director of marketing **believes the company’s future success depends on maximizing the number of annual memberships**. Therefore, it is necessary to understand how casual riders and annual members use Cyclistic bikes diferently. From these insights, the team will design a new marketing strategy to convert casual riders into annual members.\n\nInitial considerations to take into account:\n* Customers who purchase annual memberships are Cyclistic members.\n* Customers who purchase single-ride or full-day passes are referred to as casual riders.\n* Casual riders are already aware of the Cyclistic program.\n* Cyclistic’s finance analysts have concluded that annual members are much more profitable than casual riders.\n\n\n## 2. ASK\nThe goal is set: Design marketing strategies aimed to converting casual riders into annual members.<br>\nTo achieve it, first we need to solve the following questions:\n- How do annual members and casual riders use Cyclistic bikes differently?\n- Why would casual riders buy Cyclistic annual memberships?\n\n\n## 3. PREPARE\nCyclistic’s historical trip data will be used to analyze and identify trends.\n\nThe company has 5824 bicycles that are geotracked and locked into a network of 692 stations across Chicago. Every time a bicycle is used, all the trip information is stored in the database, which groups trips by month and year.<br>\nThe information collected for each trip is as follows:\n- Trip identifier\n- Type of bicycle used\n- Time and date of trip start\n- Time and date of trip end\n- ID and name of start station\n- ID and name of end station\n- Latitude and longitude coordinates of start station\n- Latitude and longitude coordinates of end station\n- User type (member or casual)\n\n### 3.1: COLLECT DATA\n\nAll data has been obtained from the following source: [Divvy-tripdata](https://divvy-tripdata.s3.amazonaws.com/index.html). <br> (Note: The datasets have a different name because Cyclistic is a fictional company. For the purposes of this case study, the datasets are appropriate and will enable us to answer the business questions. The data has been made available by Motivate International Inc. under this [license](https://divvybikes.com/data-license-agreement) ).\n<br><br>\n**Data from June 2024 to June 2025 will be used for this study.**\n<br><br>\n\n<u>The data source complies with the ROCCC standard:</u>\n- ✅ **Reliability**: Auto-logged data  \n- 🧠 **Originality**: First-party infrastructure data  \n- 📊 **Comprehensiveness**: 5M+ records, key metrics  \n- 🕒 **Currentness**: Latest 12 months available  \n- 📌 **Cited**: Clear provenance & license\n\n<u>Key Limitations:</u>\n* No socioeconomic data (income/residency)\n* Weather/external factors unrecorded\n* No public holidays or events have been taken into account.\n<br>\n\nLet's start with the first step, which is to load the data packages, libraries, and CSV files needed to start the analysis:","metadata":{"papermill":{"duration":0.014395,"end_time":"2025-07-28T18:10:15.745566","exception":false,"start_time":"2025-07-28T18:10:15.731171","status":"completed"},"tags":[]}},{"cell_type":"code","source":"#LOAD REQUIRED PACKAGES\n#install.packages(\"tidyverse\")\n#install.packages(\"lubridate\")\n#install.packages(\"ggplot2\")\n#install.packages(\"janitor\")\n#install.packages(\"skimr\")\n#install.packages(\"leaflet\")\n#install.packages(\"patchwork\")\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(janitor)\nlibrary(skimr)\nlibrary(leaflet)\nlibrary(patchwork)\n\n#IMPORT DATA (06_2024 - 06_2025)\n#Upload Divvy datasets (csv files)\n\nm06_2025 <- read_csv(\"/kaggle/input/cyclistic-bike-share-06-2024-06-2025/202506-divvy-tripdata.csv\")\nm05_2025 <- read_csv(\"/kaggle/input/cyclistic-bike-share-06-2024-06-2025/202505-divvy-tripdata.csv\")\nm04_2025 <- read_csv(\"/kaggle/input/cyclistic-bike-share-06-2024-06-2025/202504-divvy-tripdata.csv\")\nm03_2025 <- read_csv(\"/kaggle/input/cyclistic-bike-share-06-2024-06-2025/202503-divvy-tripdata.csv\")\nm02_2025 <- read_csv(\"/kaggle/input/cyclistic-bike-share-06-2024-06-2025/202502-divvy-tripdata.csv\")\nm01_2025 <- read_csv(\"/kaggle/input/cyclistic-bike-share-06-2024-06-2025/202501-divvy-tripdata.csv\")\nm12_2024 <- read_csv(\"/kaggle/input/cyclistic-bike-share-06-2024-06-2025/202412-divvy-tripdata.csv\")\nm11_2024 <- read_csv(\"/kaggle/input/cyclistic-bike-share-06-2024-06-2025/202411-divvy-tripdata.csv\")\nm10_2024 <- read_csv(\"/kaggle/input/cyclistic-bike-share-06-2024-06-2025/202410-divvy-tripdata.csv\")\nm09_2024 <- read_csv(\"/kaggle/input/cyclistic-bike-share-06-2024-06-2025/202409-divvy-tripdata.csv\")\nm08_2024 <- read_csv(\"/kaggle/input/cyclistic-bike-share-06-2024-06-2025/202408-divvy-tripdata.csv\")\nm07_2024 <- read_csv(\"/kaggle/input/cyclistic-bike-share-06-2024-06-2025/202407-divvy-tripdata.csv\")\nm06_2024 <- read_csv(\"/kaggle/input/cyclistic-bike-share-06-2024-06-2025/202406-divvy-tripdata.csv\")","metadata":{"collapsed":true,"execution":{"iopub.execute_input":"2025-07-28T18:10:15.777696Z","iopub.status.busy":"2025-07-28T18:10:15.775273Z","iopub.status.idle":"2025-07-28T18:10:53.953989Z","shell.execute_reply":"2025-07-28T18:10:53.95158Z"},"jupyter":{"outputs_hidden":true},"papermill":{"duration":38.197863,"end_time":"2025-07-28T18:10:53.956681","exception":false,"start_time":"2025-07-28T18:10:15.758818","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 3.2: COMBINE DATA INTO A SINGLE DATAFRAME\nWe have different dataframes and we need to combine them into a single dataframe.<br>\nFirst step is to make sure that we can combine the data because the different source files have the same columns.\n\n","metadata":{"papermill":{"duration":0.016077,"end_time":"2025-07-28T18:10:53.988944","exception":false,"start_time":"2025-07-28T18:10:53.972867","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# TRUE if bindable\n\nlist_datasets <- list(\n  m06_2024, m07_2024,\n  m08_2024, m09_2024, m10_2024, m11_2024, m12_2024,\n  m01_2025, m02_2025, m03_2025, m04_2025, m05_2025, m06_2025\n)\n\ncol_names <- lapply(list_datasets, names)\nall_equal <- all(sapply(col_names, function(x) identical(x, col_names[[1]])))\nall_equal","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:10:54.052547Z","iopub.status.busy":"2025-07-28T18:10:54.022814Z","iopub.status.idle":"2025-07-28T18:10:54.083013Z","shell.execute_reply":"2025-07-28T18:10:54.081146Z"},"papermill":{"duration":0.080848,"end_time":"2025-07-28T18:10:54.085632","exception":false,"start_time":"2025-07-28T18:10:54.004784","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Result is TRUE, all files have the same columns.<br> Just as an extra verification, we check that the columns that are the same in the different files, have also the same class.","metadata":{"papermill":{"duration":0.015988,"end_time":"2025-07-28T18:10:54.117834","exception":false,"start_time":"2025-07-28T18:10:54.101846","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# TRUE IF SAME CLASS\ncol_classes <- lapply(list_datasets, function(df) sapply(df, class))\nall(sapply(col_classes, function(x) identical(x, col_classes[[1]])))","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:10:54.154268Z","iopub.status.busy":"2025-07-28T18:10:54.15238Z","iopub.status.idle":"2025-07-28T18:10:54.182417Z","shell.execute_reply":"2025-07-28T18:10:54.180276Z"},"papermill":{"duration":0.051365,"end_time":"2025-07-28T18:10:54.185214","exception":false,"start_time":"2025-07-28T18:10:54.133849","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Result is also TRUE. \nWe combine the data into a single dataframe:","metadata":{"papermill":{"duration":0.015875,"end_time":"2025-07-28T18:10:54.217143","exception":false,"start_time":"2025-07-28T18:10:54.201268","status":"completed"},"tags":[]}},{"cell_type":"code","source":"all_rides <- bind_rows( m06_2024, m07_2024,\n                       m08_2024, m09_2024, m10_2024, m11_2024, m12_2024,\n                       m01_2025, m02_2025, m03_2025, m04_2025, m05_2025, m06_2025)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:10:54.254441Z","iopub.status.busy":"2025-07-28T18:10:54.251889Z","iopub.status.idle":"2025-07-28T18:10:59.283982Z","shell.execute_reply":"2025-07-28T18:10:59.282196Z"},"papermill":{"duration":5.053195,"end_time":"2025-07-28T18:10:59.286431","exception":false,"start_time":"2025-07-28T18:10:54.233236","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 3.3: INITIAL INSPECTION TO UNDERSTAND THE DATA STRUCTURE\nWe perform an initial inspection of the new dataframe:","metadata":{"papermill":{"duration":0.016807,"end_time":"2025-07-28T18:10:59.319327","exception":false,"start_time":"2025-07-28T18:10:59.30252","status":"completed"},"tags":[]}},{"cell_type":"code","source":"colnames(all_rides)\nstr(all_rides)\ndim(all_rides)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:10:59.392121Z","iopub.status.busy":"2025-07-28T18:10:59.390603Z","iopub.status.idle":"2025-07-28T18:10:59.440255Z","shell.execute_reply":"2025-07-28T18:10:59.438622Z"},"papermill":{"duration":0.107307,"end_time":"2025-07-28T18:10:59.442752","exception":false,"start_time":"2025-07-28T18:10:59.335445","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 4. PROCESS\nIn this step, the dataframe will be cleaned in order to prepare the data for analysis.\n### 4.1: CLEAN UP TO PREPARE FOR ANALYSIS\nIn the previous step, when we applied the str() function to get an initial view of the data, we saw that there are some NA values.\nLet's check the number of rows that have NA values.\n","metadata":{"papermill":{"duration":0.016423,"end_time":"2025-07-28T18:10:59.477133","exception":false,"start_time":"2025-07-28T18:10:59.46071","status":"completed"},"tags":[]}},{"cell_type":"code","source":"print(paste(\"number of NA:\",sum(!complete.cases(all_rides))))","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:10:59.514177Z","iopub.status.busy":"2025-07-28T18:10:59.512564Z","iopub.status.idle":"2025-07-28T18:11:01.778392Z","shell.execute_reply":"2025-07-28T18:11:01.776412Z"},"papermill":{"duration":2.287113,"end_time":"2025-07-28T18:11:01.780905","exception":false,"start_time":"2025-07-28T18:10:59.493792","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"The result is that 30% of the rows have at least one NA value. This is a high percentage of the data set. However, if we want to continue with the Case Study, we have no choice but to remove these values, as we have no way of checking what the relevant values would be.","metadata":{"papermill":{"duration":0.016503,"end_time":"2025-07-28T18:11:01.813887","exception":false,"start_time":"2025-07-28T18:11:01.797384","status":"completed"},"tags":[]}},{"cell_type":"code","source":"all_rides_clean <- all_rides %>% drop_na()\nany(is.na(all_rides_clean))","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:01.8505Z","iopub.status.busy":"2025-07-28T18:11:01.84892Z","iopub.status.idle":"2025-07-28T18:11:07.462805Z","shell.execute_reply":"2025-07-28T18:11:07.460355Z"},"papermill":{"duration":5.635901,"end_time":"2025-07-28T18:11:07.466104","exception":false,"start_time":"2025-07-28T18:11:01.830203","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Now we want to be sure that apart from NA, there are no blank spaces.","metadata":{"papermill":{"duration":0.01688,"end_time":"2025-07-28T18:11:07.49981","exception":false,"start_time":"2025-07-28T18:11:07.48293","status":"completed"},"tags":[]}},{"cell_type":"code","source":"print(paste(\"blanks_in_ride_id = \",nrow(all_rides_clean[(all_rides_clean$ride_id == \"\"),])))\nprint(paste(\"blanks_in_rideable_type = \",nrow(all_rides_clean[(all_rides_clean$rideable_type == \"\"),])))\nprint(paste(\"blanks_in_start_station_id = \",nrow(all_rides_clean[(all_rides_clean$start_station_id == \"\"),])))\nprint(paste(\"blanks_in_start_station_name = \",nrow(all_rides_clean[(all_rides_clean$start_station_name == \"\"),])))\nprint(paste(\"blanks_in_end_station_id = \",nrow(all_rides_clean[(all_rides_clean$end_station_id == \"\"),])))\nprint(paste(\"blanks_in_start_station_name = \",nrow(all_rides_clean[(all_rides_clean$start_station_name == \"\"),])))\nprint(paste(\"blanks_in_member_casual = \",nrow(all_rides_clean[(all_rides_clean$member_casual == \"\"),])))\n","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:07.536771Z","iopub.status.busy":"2025-07-28T18:11:07.535202Z","iopub.status.idle":"2025-07-28T18:11:07.889942Z","shell.execute_reply":"2025-07-28T18:11:07.887838Z"},"papermill":{"duration":0.376342,"end_time":"2025-07-28T18:11:07.892954","exception":false,"start_time":"2025-07-28T18:11:07.516612","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### 4.1.1: CHECK FOR DATA INCONSISTENCIES IN THE DIFFERENT COLUMNS\n**RIDE_ID:** Each ride must have a unique ID. If there is a repeated ID, it means we are counting the ride twice. With the code below, we check and see that there are no duplicate ride IDs.","metadata":{"papermill":{"duration":0.017343,"end_time":"2025-07-28T18:11:07.927587","exception":false,"start_time":"2025-07-28T18:11:07.910244","status":"completed"},"tags":[]}},{"cell_type":"code","source":"print(paste(\"Nº of ID duplicates:\",sum(duplicated(all_rides_clean$ride_id))))","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:07.965286Z","iopub.status.busy":"2025-07-28T18:11:07.963726Z","iopub.status.idle":"2025-07-28T18:11:08.392004Z","shell.execute_reply":"2025-07-28T18:11:08.389806Z"},"papermill":{"duration":0.450586,"end_time":"2025-07-28T18:11:08.395066","exception":false,"start_time":"2025-07-28T18:11:07.94448","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**RIDEABLE_TYPE**: We check the different options of bikes. Based on the result of the code below, we consider that there is no inconsistency. ","metadata":{"papermill":{"duration":0.01706,"end_time":"2025-07-28T18:11:08.429118","exception":false,"start_time":"2025-07-28T18:11:08.412058","status":"completed"},"tags":[]}},{"cell_type":"code","source":"table(all_rides_clean$rideable_type)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:08.466734Z","iopub.status.busy":"2025-07-28T18:11:08.465139Z","iopub.status.idle":"2025-07-28T18:11:08.954134Z","shell.execute_reply":"2025-07-28T18:11:08.951906Z"},"papermill":{"duration":0.511035,"end_time":"2025-07-28T18:11:08.957074","exception":false,"start_time":"2025-07-28T18:11:08.446039","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**STARTED_AT**: The column has the POSIXct format (example: \"2024-06-11 17:20:06\"). <br>\nFor future analysis it is much more interesting to have the hours separated from the date, and even to break down the date by days, months and years. <br>\nNext, we will create new columns to separate these values:","metadata":{"papermill":{"duration":0.017335,"end_time":"2025-07-28T18:11:08.991347","exception":false,"start_time":"2025-07-28T18:11:08.974012","status":"completed"},"tags":[]}},{"cell_type":"code","source":"Sys.setlocale(\"LC_TIME\", \"en_US.UTF-8\")\n\nall_rides_clean$start_hour <- as.integer(format(all_rides_clean$started_at, \"%H\"))\nall_rides_clean <- all_rides_clean %>%\n  mutate(start_hour = ifelse(start_hour == 0, 24, start_hour))\n\nall_rides_clean$date <- as.Date(all_rides_clean$started_at) #The default format is yyyy-mm-dd\nall_rides_clean$month <- format(as.Date(all_rides_clean$date), \"%m\")\nall_rides_clean$day <- format(as.Date(all_rides_clean$date), \"%d\") \nall_rides_clean$year <- format(as.Date(all_rides_clean$date), \"%Y\") \nall_rides_clean$day_of_week <- format(as.Date(all_rides_clean$date), \"%A\")\n\nall_rides_clean <- all_rides_clean %>%\n  mutate(month = month(as.numeric(month), label = TRUE, abbr = TRUE,))\n\nprint(head(all_rides_clean), width = Inf)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:09.030019Z","iopub.status.busy":"2025-07-28T18:11:09.028372Z","iopub.status.idle":"2025-07-28T18:11:28.907627Z","shell.execute_reply":"2025-07-28T18:11:28.905191Z"},"papermill":{"duration":19.901958,"end_time":"2025-07-28T18:11:28.910938","exception":false,"start_time":"2025-07-28T18:11:09.00898","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**START_STATION_NAME & START_STATION_ID:** We check if there is any start_station_Id related with more than one start_station_name.","metadata":{"papermill":{"duration":0.017488,"end_time":"2025-07-28T18:11:28.946527","exception":false,"start_time":"2025-07-28T18:11:28.929039","status":"completed"},"tags":[]}},{"cell_type":"code","source":"start_stations <- all_rides_clean %>% \n  group_by(start_station_name,start_station_id) %>%\n  summarise(,.groups = 'drop')\nseveral_start_station_name_for_id <- start_stations %>% \n  group_by(start_station_id) %>%\n  summarise(total=n(),.groups = 'drop') %>%\n  filter(total>1)\n\nView(several_start_station_name_for_id)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:28.986029Z","iopub.status.busy":"2025-07-28T18:11:28.984439Z","iopub.status.idle":"2025-07-28T18:11:29.31243Z","shell.execute_reply":"2025-07-28T18:11:29.310232Z"},"papermill":{"duration":0.351608,"end_time":"2025-07-28T18:11:29.315635","exception":false,"start_time":"2025-07-28T18:11:28.964027","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"There are 105 stations IDs with more than one name associated. We will unify every ID with only one name. \nWe don't have enough information to know which name is correct. Since there are 105 cases, which is too many to review manually one by one, we will choose and keep the most frequent name (although in most cases we only have two options).","metadata":{"papermill":{"duration":0.017841,"end_time":"2025-07-28T18:11:29.351139","exception":false,"start_time":"2025-07-28T18:11:29.333298","status":"completed"},"tags":[]}},{"cell_type":"code","source":"#first we check the most frequent name between the diferent names associated to an ID.\nstart_station_id_fixed_names <- all_rides_clean %>% \n  group_by(start_station_id, start_station_name) %>%\n  summarise(n = n(), .groups = \"drop\") %>%\n  group_by(start_station_id) %>%\n  slice_max(order_by = n, n = 1, with_ties = FALSE) %>% \n  select(start_station_id, start_station_name)\n\n#second we delete all start_station_name and we add the picked one.\nall_rides_clean_v1 <- all_rides_clean %>%\n  select(-start_station_name) %>%\n  left_join(start_station_id_fixed_names, by = \"start_station_id\")\n\n#third we verificate to ensure that we no longer have the list with the sum of different start_station_name for one station_id.\nstart_stations <- all_rides_clean_v1 %>% \n  group_by(start_station_name,start_station_id) %>%\n  summarise(,.groups = 'drop')\nseveral_start_station_name_for_id_v1 <- start_stations %>% \n  group_by(start_station_id) %>%\n  summarise(total=n(),.groups = 'drop') %>%\n  filter(total>1)\n","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:29.391015Z","iopub.status.busy":"2025-07-28T18:11:29.389091Z","iopub.status.idle":"2025-07-28T18:11:32.402773Z","shell.execute_reply":"2025-07-28T18:11:32.400918Z"},"papermill":{"duration":3.0364,"end_time":"2025-07-28T18:11:32.405445","exception":false,"start_time":"2025-07-28T18:11:29.369045","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**END_STATION_NAME & END_STATION_ID:** We repeat the same process as before, in this case for end stations.Let's check if there is any end_station_Id related with more than one end_station_name.","metadata":{"papermill":{"duration":0.021825,"end_time":"2025-07-28T18:11:32.446822","exception":false,"start_time":"2025-07-28T18:11:32.424997","status":"completed"},"tags":[]}},{"cell_type":"code","source":"end_stations <- all_rides_clean_v1 %>% \n  group_by(end_station_name,end_station_id) %>%\n  summarise(,.groups = 'drop')\nseveral_end_station_name_for_id <- end_stations %>% \n  group_by(end_station_id) %>%\n  summarise(total=n(),.groups = 'drop') %>%\n  filter(total>1)\nView(several_end_station_name_for_id)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:32.488986Z","iopub.status.busy":"2025-07-28T18:11:32.487318Z","iopub.status.idle":"2025-07-28T18:11:33.18671Z","shell.execute_reply":"2025-07-28T18:11:33.184867Z"},"papermill":{"duration":0.723577,"end_time":"2025-07-28T18:11:33.189136","exception":false,"start_time":"2025-07-28T18:11:32.465559","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"There are 106 end_station_id with more than one end_station_name associated. We will unify every ID with only one name. ","metadata":{"papermill":{"duration":0.018444,"end_time":"2025-07-28T18:11:33.226036","exception":false,"start_time":"2025-07-28T18:11:33.207592","status":"completed"},"tags":[]}},{"cell_type":"code","source":"#first we check the most frequent name between the diferent names associated to an ID.\nend_station_id_fixed_names <- all_rides_clean_v1 %>% \n  group_by(end_station_id, end_station_name) %>%\n  summarise(n = n(), .groups = \"drop\") %>%\n  group_by(end_station_id) %>%\n  slice_max(order_by = n, n = 1, with_ties = FALSE) %>% \n  select(end_station_id, end_station_name)\n\n#second we delete all end_station_name and we add the picked one.\nall_rides_clean_v2 <- all_rides_clean_v1 %>%\n  select(-end_station_name) %>%\n  left_join(end_station_id_fixed_names, by = \"end_station_id\")\n\n#third we verificate to ensure that we no longer have the list with the sum of different end_station_name for one station_id.\nend_stations <- all_rides_clean_v2 %>% \n  group_by(end_station_name,end_station_id) %>%\n  summarise(,.groups = 'drop')\nseveral_end_station_name_for_id_v1 <- end_stations %>% \n  group_by(end_station_id) %>%\n  summarise(total=n(),.groups = 'drop') %>%\n  filter(total>1)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:33.267886Z","iopub.status.busy":"2025-07-28T18:11:33.266018Z","iopub.status.idle":"2025-07-28T18:11:37.015177Z","shell.execute_reply":"2025-07-28T18:11:37.012905Z"},"papermill":{"duration":3.77342,"end_time":"2025-07-28T18:11:37.01774","exception":false,"start_time":"2025-07-28T18:11:33.24432","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**START_LAT & START_LNG:** For each station_ID must be only one value for latitude and one for longitude. Let's check it:","metadata":{"papermill":{"duration":0.021227,"end_time":"2025-07-28T18:11:37.057134","exception":false,"start_time":"2025-07-28T18:11:37.035907","status":"completed"},"tags":[]}},{"cell_type":"code","source":"all_rides_clean_v2 %>%\n  group_by(start_station_id) %>%\n  summarise(\n    n_lat = n_distinct(start_lat),\n    n_lng = n_distinct(start_lng),\n    .groups = \"drop\") %>%\n  filter(n_lat > 1 | n_lng > 1)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:37.097759Z","iopub.status.busy":"2025-07-28T18:11:37.096171Z","iopub.status.idle":"2025-07-28T18:11:37.658915Z","shell.execute_reply":"2025-07-28T18:11:37.657031Z"},"papermill":{"duration":0.585524,"end_time":"2025-07-28T18:11:37.661344","exception":false,"start_time":"2025-07-28T18:11:37.07582","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"We see that there is a big number of different latitude and longitude values for some stations ID. <br> In total 2054 station IDs with more than one value for start_lat or start_lng. We decide to create a dataframe to store mean latitude and longitude for each start_station_id.","metadata":{"papermill":{"duration":0.018887,"end_time":"2025-07-28T18:11:37.699573","exception":false,"start_time":"2025-07-28T18:11:37.680686","status":"completed"},"tags":[]}},{"cell_type":"code","source":"start_station_mean_lng_lat <- all_rides_clean_v2 %>%\n  group_by(start_station_id) %>%\n  summarise(start_latitude = mean(start_lat),start_longitude = mean(start_lng),.groups = 'drop')\n\nall_rides_clean_v3 <- inner_join(all_rides_clean_v2,start_station_mean_lng_lat, by = 'start_station_id')\n\n# We do the verification:\nall_rides_clean_v3 %>%\n  group_by(start_station_id) %>%\n  summarise(\n    n_lat = n_distinct(start_latitude),\n    n_lng = n_distinct(start_longitude),\n    .groups = \"drop\") %>%\n  filter(n_lat > 1 | n_lng > 1)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:37.74119Z","iopub.status.busy":"2025-07-28T18:11:37.739368Z","iopub.status.idle":"2025-07-28T18:11:42.689802Z","shell.execute_reply":"2025-07-28T18:11:42.687404Z"},"papermill":{"duration":4.974488,"end_time":"2025-07-28T18:11:42.692977","exception":false,"start_time":"2025-07-28T18:11:37.718489","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**END_LAT & END_LNG:** We repeat the same process we did for start_lat and start_lng.  For each station_ID must be only one value for latitude and one for longitude. Let's check it:","metadata":{"papermill":{"duration":0.018852,"end_time":"2025-07-28T18:11:42.730877","exception":false,"start_time":"2025-07-28T18:11:42.712025","status":"completed"},"tags":[]}},{"cell_type":"code","source":"all_rides_clean_v3 %>%\n  group_by(end_station_id) %>%\n  summarise(\n    n_lat = n_distinct(end_lat),\n    n_lng = n_distinct(end_lng),\n    .groups = \"drop\") %>%\n  filter(n_lat > 1 | n_lng > 1)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:42.772624Z","iopub.status.busy":"2025-07-28T18:11:42.770987Z","iopub.status.idle":"2025-07-28T18:11:43.321423Z","shell.execute_reply":"2025-07-28T18:11:43.318859Z"},"papermill":{"duration":0.574503,"end_time":"2025-07-28T18:11:43.324622","exception":false,"start_time":"2025-07-28T18:11:42.750119","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"code","source":"end_station_mean_lng_lat <- all_rides_clean_v3 %>%\n  group_by(end_station_id) %>%\n  summarise(end_latitude = mean(end_lat),end_longitude = mean(end_lng),.groups = 'drop')\n\nall_rides_clean_v4 <- inner_join(all_rides_clean_v3,end_station_mean_lng_lat, by = 'end_station_id')\n\n# We do the verification:\nall_rides_clean_v4 %>%\n  group_by(end_station_id) %>%\n  summarise(\n    n_lat = n_distinct(end_latitude),\n    n_lng = n_distinct(end_longitude),\n    .groups = \"drop\") %>%\n  filter(n_lat > 1 | n_lng > 1)\n\n#We delete the old columns because with the mean columns for latitude and longitude is enough:\nall_rides_clean_v4 <- all_rides_clean_v4 %>% select(-start_lat,-start_lng,-end_lat,-end_lng)\ncolnames(all_rides_clean_v4)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:43.368274Z","iopub.status.busy":"2025-07-28T18:11:43.365545Z","iopub.status.idle":"2025-07-28T18:11:47.131929Z","shell.execute_reply":"2025-07-28T18:11:47.129448Z"},"papermill":{"duration":3.791161,"end_time":"2025-07-28T18:11:47.135179","exception":false,"start_time":"2025-07-28T18:11:43.344018","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**MEMBER_CASUAL:** We check the different type of users. Based on the result of the code below, we consider that there is no inconsistency.","metadata":{"papermill":{"duration":0.019813,"end_time":"2025-07-28T18:11:47.174695","exception":false,"start_time":"2025-07-28T18:11:47.154882","status":"completed"},"tags":[]}},{"cell_type":"code","source":"table(all_rides_clean_v4$member_casual)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:47.217907Z","iopub.status.busy":"2025-07-28T18:11:47.216308Z","iopub.status.idle":"2025-07-28T18:11:47.710983Z","shell.execute_reply":"2025-07-28T18:11:47.708796Z"},"papermill":{"duration":0.51931,"end_time":"2025-07-28T18:11:47.713786","exception":false,"start_time":"2025-07-28T18:11:47.194476","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 4.2: ADD DATA TO PREPARE FOR ANALYSIS\nIt is important to know the duration of the different rides, as this can be useful information for our analysis. Let's create a column called “ride_duration_min.” As the name suggests, the unit of time used is minutes.","metadata":{"papermill":{"duration":0.020507,"end_time":"2025-07-28T18:11:47.75435","exception":false,"start_time":"2025-07-28T18:11:47.733843","status":"completed"},"tags":[]}},{"cell_type":"code","source":"all_rides_clean_v4$ride_duration <- difftime(all_rides_clean_v4$ended_at,all_rides_clean_v4$started_at)\nall_rides_clean_v4$ride_duration_min <- as.numeric(all_rides_clean_v4$ride_duration) / 60\nall_rides_clean_v4 <- all_rides_clean_v4 %>%\n  select(-ride_duration)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:47.798212Z","iopub.status.busy":"2025-07-28T18:11:47.796571Z","iopub.status.idle":"2025-07-28T18:11:47.961758Z","shell.execute_reply":"2025-07-28T18:11:47.960094Z"},"papermill":{"duration":0.190464,"end_time":"2025-07-28T18:11:47.964745","exception":false,"start_time":"2025-07-28T18:11:47.774281","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"We need to check if there are inconsistencies in the new column created **RIDE_DURATION_MIN**:\n1)  \"ride_duration_min\" can not be negative. Also, we consider a false start for rides under 1 minute. So we will remove these rows for these cases.","metadata":{"papermill":{"duration":0.020397,"end_time":"2025-07-28T18:11:48.005013","exception":false,"start_time":"2025-07-28T18:11:47.984616","status":"completed"},"tags":[]}},{"cell_type":"code","source":"mean(all_rides_clean_v4$ride_duration_min < 1) * 100\n# 0,65% of the rides are under 1 min. We delete these.\n\nall_rides_clean_v5 <- all_rides_clean_v4 %>%\n  filter(ride_duration_min >= 1)\n","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:48.048218Z","iopub.status.busy":"2025-07-28T18:11:48.046664Z","iopub.status.idle":"2025-07-28T18:11:49.648137Z","shell.execute_reply":"2025-07-28T18:11:49.646275Z"},"papermill":{"duration":1.626574,"end_time":"2025-07-28T18:11:49.651362","exception":false,"start_time":"2025-07-28T18:11:48.024788","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"2) Bikes can not be hire for more than 1 day. We need to be sure that \"ride_duration_min\" can't be more than 1 day (1440min).","metadata":{"papermill":{"duration":0.020117,"end_time":"2025-07-28T18:11:49.691731","exception":false,"start_time":"2025-07-28T18:11:49.671614","status":"completed"},"tags":[]}},{"cell_type":"code","source":"mean(all_rides_clean_v5$ride_duration_min > 1440) * 100\n# 0,0028% of the rides are under 1 min. We delete these.\n\nall_rides_clean_v5 <- all_rides_clean_v5 %>%\n  filter(ride_duration_min <1440)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:49.73627Z","iopub.status.busy":"2025-07-28T18:11:49.734719Z","iopub.status.idle":"2025-07-28T18:11:53.239426Z","shell.execute_reply":"2025-07-28T18:11:53.237666Z"},"papermill":{"duration":3.529974,"end_time":"2025-07-28T18:11:53.241992","exception":false,"start_time":"2025-07-28T18:11:49.712018","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"3) We need to detect if there are out-of-range values in \"ride_duration_min\".","metadata":{"papermill":{"duration":0.021094,"end_time":"2025-07-28T18:11:53.283227","exception":false,"start_time":"2025-07-28T18:11:53.262133","status":"completed"},"tags":[]}},{"cell_type":"code","source":"summary(all_rides_clean_v5$ride_duration_min)\nggplot(all_rides_clean_v5) + aes(x = ride_duration_min) + geom_histogram(bins = 100) +labs(y = \"Nº of rides\")\n","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:53.335715Z","iopub.status.busy":"2025-07-28T18:11:53.334087Z","iopub.status.idle":"2025-07-28T18:11:57.611761Z","shell.execute_reply":"2025-07-28T18:11:57.609884Z"},"papermill":{"duration":4.309436,"end_time":"2025-07-28T18:11:57.614229","exception":false,"start_time":"2025-07-28T18:11:53.304793","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"All durations are between more than 1 minute and less than 24 hours. <br>\nRides lasting almost 24 hours could be suspicious, but with the information available, it is not possible to determine whether they are true outliners, since the possibility of renting the bike for up to 24 hours is feasible and can occur.","metadata":{"papermill":{"duration":0.020831,"end_time":"2025-07-28T18:11:57.656693","exception":false,"start_time":"2025-07-28T18:11:57.635862","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"### 4.3: DATA CLEANSING CHANGE LOG\n+ Removed rows with NA or blank spaces.\n+ Removed duplicate trips by identifying duplicates in ride_id (There was actually no duplicated rows).\n+ Reviewed inconsistent data.<br>\n  Including splitting the started_at field into different columns: 'start_hour''date''month''day''year''day_of_week'.<br>\n  Ensure a unique name for each station identifier in order to improve consistency. <br>\n  Ensure unique coordinates (latitude and longitude) for each station identifier in order to improve consistency.\n+ Created new column for analysis (ride_duration_min).\n  Including look for incosistencies in the new column, and detect outlines and remove if neccessary.\n\n## 5. ANALYZE\nThe main objective of the analysis is to understand the behavior patterns of different types of users (CASUAL vs MEMBERS) in order to gather sufficient information to develop marketing strategies that will encourage casual users to become members.\n\n### 5.1: CASUAL vs MEMBER: Nº OF RIDES AND RIDE_DURATION\n","metadata":{"papermill":{"duration":0.020748,"end_time":"2025-07-28T18:11:57.69792","exception":false,"start_time":"2025-07-28T18:11:57.677172","status":"completed"},"tags":[]}},{"cell_type":"code","source":"##OBS1\n\nobs1 <- all_rides_clean_v5 %>% \n  group_by(member_casual) %>% \n  summarise (total_rides=n(),total_duration_min=sum(ride_duration_min),avg_ride_time_min=round(mean(ride_duration_min),3),.groups = \"drop\") %>% \n  mutate(percent_num_rides = paste0(round((total_rides / sum(total_rides))*100, 2), \"%\"))\nView(obs1) ","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:57.74411Z","iopub.status.busy":"2025-07-28T18:11:57.742503Z","iopub.status.idle":"2025-07-28T18:11:57.915884Z","shell.execute_reply":"2025-07-28T18:11:57.914038Z"},"papermill":{"duration":0.198711,"end_time":"2025-07-28T18:11:57.918347","exception":false,"start_time":"2025-07-28T18:11:57.719636","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 5.2: CASUAL vs MEMBER: Nº OF RIDES AND DURATION BY MONTHS","metadata":{"papermill":{"duration":0.021087,"end_time":"2025-07-28T18:11:57.960412","exception":false,"start_time":"2025-07-28T18:11:57.939325","status":"completed"},"tags":[]}},{"cell_type":"code","source":"#OBS2\n\nobs2<- all_rides_clean_v5 %>% \n  group_by(month, member_casual) %>% \n  summarise (total_rides=n(),total_duration_min=sum(ride_duration_min),avg_ride_time_min=round(mean(ride_duration_min),3),.groups = \"drop_last\")  %>% \n  mutate(percent_num_rides = paste0(round((total_rides / sum(total_rides))*100, 0),\"%\"))\nView(obs2)\n","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:58.005935Z","iopub.status.busy":"2025-07-28T18:11:58.004313Z","iopub.status.idle":"2025-07-28T18:11:58.650779Z","shell.execute_reply":"2025-07-28T18:11:58.64893Z"},"papermill":{"duration":0.671856,"end_time":"2025-07-28T18:11:58.653219","exception":false,"start_time":"2025-07-28T18:11:57.981363","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 5.3: CASUAL vs MEMBER: Nº OF RIDES AND DURATION BY DAYS OF THE WEEK","metadata":{"papermill":{"duration":0.021861,"end_time":"2025-07-28T18:11:58.696827","exception":false,"start_time":"2025-07-28T18:11:58.674966","status":"completed"},"tags":[]}},{"cell_type":"code","source":"## OBS3\n\n#First we order the days of the week\nall_rides_clean_v5$day_of_week <- ordered(all_rides_clean_v5$day_of_week, levels=c(\"Monday\", \"Tuesday\",\"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"))\n\nobs3 <- all_rides_clean_v5 %>% \n  group_by(member_casual, day_of_week) %>% \n  summarise (total_rides=n(),total_duration_min=sum(ride_duration_min),avg_ride_time_min=round(mean(ride_duration_min),3),.groups = \"drop\")\nView(obs3)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:58.743424Z","iopub.status.busy":"2025-07-28T18:11:58.741902Z","iopub.status.idle":"2025-07-28T18:11:58.989974Z","shell.execute_reply":"2025-07-28T18:11:58.988231Z"},"papermill":{"duration":0.273694,"end_time":"2025-07-28T18:11:58.992306","exception":false,"start_time":"2025-07-28T18:11:58.718612","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 5.4: CASUAL vs MEMBER: Nº OF RIDES AND DURATION BY HOURS OF THE DAY","metadata":{"papermill":{"duration":0.021333,"end_time":"2025-07-28T18:11:59.03484","exception":false,"start_time":"2025-07-28T18:11:59.013507","status":"completed"},"tags":[]}},{"cell_type":"code","source":"##OBS4\n\nobs4 <- all_rides_clean_v5 %>% \n  group_by(member_casual, start_hour) %>% \n  summarise (total_rides=n(),total_duration_min=sum(ride_duration_min),avg_ride_time_min=round(mean(ride_duration_min),3),.groups = \"drop\")\nView(obs4)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:59.081311Z","iopub.status.busy":"2025-07-28T18:11:59.079627Z","iopub.status.idle":"2025-07-28T18:11:59.450282Z","shell.execute_reply":"2025-07-28T18:11:59.448481Z"},"papermill":{"duration":0.396614,"end_time":"2025-07-28T18:11:59.452712","exception":false,"start_time":"2025-07-28T18:11:59.056098","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 5.5: CASUAL vs MEMBER: TYPE OF BIKES","metadata":{"papermill":{"duration":0.022297,"end_time":"2025-07-28T18:11:59.497431","exception":false,"start_time":"2025-07-28T18:11:59.475134","status":"completed"},"tags":[]}},{"cell_type":"code","source":"obs5 <- all_rides_clean_v5 %>% \n  group_by(member_casual, rideable_type) %>% \n  summarise (total_rides=n(),total_duration_min=sum(ride_duration_min),avg_ride_time_min=round(mean(ride_duration_min),3),.groups = \"drop\") %>% \n  group_by(member_casual) %>% \n  mutate(percent_rideable_type = paste0(round((total_rides/sum(total_rides)*100),2),\"%\"))\nView(obs5)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:59.547729Z","iopub.status.busy":"2025-07-28T18:11:59.546042Z","iopub.status.idle":"2025-07-28T18:11:59.768114Z","shell.execute_reply":"2025-07-28T18:11:59.766383Z"},"papermill":{"duration":0.249429,"end_time":"2025-07-28T18:11:59.770529","exception":false,"start_time":"2025-07-28T18:11:59.5211","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 5.6: CASUAL vs MEMBER: TYPE OF BIKES BY MONTH","metadata":{"papermill":{"duration":0.022531,"end_time":"2025-07-28T18:11:59.815416","exception":false,"start_time":"2025-07-28T18:11:59.792885","status":"completed"},"tags":[]}},{"cell_type":"code","source":"obs6 <- all_rides_clean_v5 %>% \n  group_by(member_casual, month, rideable_type) %>% \n  summarise (total_rides=n(),total_duration_min=sum(ride_duration_min),avg_ride_time_min=round(mean(ride_duration_min),3),.groups = \"drop\") %>% \n  group_by(month, member_casual) %>% \n  mutate(percent_type_bike_month = paste0(round((total_rides/sum(total_rides)*100),2),\"%\"))\nView(obs6)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:11:59.864487Z","iopub.status.busy":"2025-07-28T18:11:59.862865Z","iopub.status.idle":"2025-07-28T18:12:00.166321Z","shell.execute_reply":"2025-07-28T18:12:00.164492Z"},"papermill":{"duration":0.330921,"end_time":"2025-07-28T18:12:00.168911","exception":false,"start_time":"2025-07-28T18:11:59.83799","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 5.7: CHECK OUT THE 10 MOST POPULAR STATIONS BY TYPE OF USER","metadata":{"papermill":{"duration":0.024206,"end_time":"2025-07-28T18:12:00.22039","exception":false,"start_time":"2025-07-28T18:12:00.196184","status":"completed"},"tags":[]}},{"cell_type":"code","source":"obs7 <- all_rides_clean_v5 %>% \n  group_by(member_casual, start_station_name, start_latitude, start_longitude) %>% \n  summarise(total_rides = n(), .groups = \"drop\") %>%\n  group_by(member_casual) %>%\n  arrange(desc(total_rides)) %>%\n  slice_head(n = 10) %>%\n  ungroup()\nView(obs7)\n","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:12:00.270241Z","iopub.status.busy":"2025-07-28T18:12:00.268529Z","iopub.status.idle":"2025-07-28T18:12:00.756547Z","shell.execute_reply":"2025-07-28T18:12:00.754729Z"},"papermill":{"duration":0.515446,"end_time":"2025-07-28T18:12:00.759023","exception":false,"start_time":"2025-07-28T18:12:00.243577","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### 5.8: CHECK OUT THE 5 MOST POPULAR ROUTES","metadata":{"papermill":{"duration":0.02368,"end_time":"2025-07-28T18:12:00.806302","exception":false,"start_time":"2025-07-28T18:12:00.782622","status":"completed"},"tags":[]}},{"cell_type":"code","source":"obs8 <- all_rides_clean_v5 %>%\n  group_by(start_station_name, end_station_name) %>%\n  summarise(total_rides = n(), .groups = \"drop\") %>%\n  mutate(\"%_of_this_route_respect_total\" = paste0(round((total_rides / sum(total_rides)) * 100, 2), \"%\")) %>%\n  arrange(desc(total_rides)) %>%\n  slice_head(n = 5)\nView(obs8)","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:12:00.858034Z","iopub.status.busy":"2025-07-28T18:12:00.85639Z","iopub.status.idle":"2025-07-28T18:12:04.937479Z","shell.execute_reply":"2025-07-28T18:12:04.935718Z"},"papermill":{"duration":4.109332,"end_time":"2025-07-28T18:12:04.939657","exception":false,"start_time":"2025-07-28T18:12:00.830325","status":"completed"},"scrolled":true,"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"It can be seen that the frequency percentage of a route compared to the total is very small, so this observation is considered irrelevant to this study.","metadata":{"papermill":{"duration":0.025123,"end_time":"2025-07-28T18:12:04.989515","exception":false,"start_time":"2025-07-28T18:12:04.964392","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"## 6. SHARE THE FINDINGS\n\n### 6.1: FINDING 1 (CASUAL vs MEMBER: Nº OF RIDES AND RIDE_DURATION)","metadata":{"papermill":{"duration":0.024853,"end_time":"2025-07-28T18:12:05.038769","exception":false,"start_time":"2025-07-28T18:12:05.013916","status":"completed"},"tags":[]}},{"cell_type":"code","source":"#% OF RIDES CASUAL vs MEMBER\nggplot(obs1, aes(x = \"\", y = total_rides, fill = member_casual)) + \n  geom_bar(stat = \"identity\", width = 1) + \n  coord_polar(\"y\") + \n  geom_text(aes(label = paste0(round((total_rides / sum(total_rides)) * 100, 1), \"%\")),\n            position = position_stack(vjust = 0.5),\n            color = \"black\", size = 5) +\n  scale_fill_manual(values = c(\"member\" = \"#1f78b4\", \"casual\" = \"orange\")) +\n  labs(title = \"% of rides by User Type\") +\n  theme_void()\n\n# AVERAGE OF RIDE DURATION CASUAL vs MEMBER\nggplot(obs1, aes(x = member_casual, y = avg_ride_time_min, fill = member_casual)) + \n    geom_col() +\n    geom_text(aes(label = avg_ride_time_min), vjust = -0.3) + \n    scale_fill_manual(values = c(\"member\" = \"#1f78b4\", \"casual\" = \"orange\")) +\n    labs(title = \"Total number of rides for user type\") +\n    theme_minimal()\n","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:12:05.092836Z","iopub.status.busy":"2025-07-28T18:12:05.091185Z","iopub.status.idle":"2025-07-28T18:12:06.244321Z","shell.execute_reply":"2025-07-28T18:12:06.242518Z"},"jupyter":{"source_hidden":true},"papermill":{"duration":1.183067,"end_time":"2025-07-28T18:12:06.246638","exception":false,"start_time":"2025-07-28T18:12:05.063571","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**FINDING 1:** We are studying the period between June 2024 and June 2025. We see that during these months members make more rides, in fact, 62,9% of all trips made were by members. <br>However, casual users do not take as many trips throughout the year, but the ones they do take last longer.","metadata":{"papermill":{"duration":0.025325,"end_time":"2025-07-28T18:12:06.297505","exception":false,"start_time":"2025-07-28T18:12:06.27218","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"### 6.2: FINDING 2 (CASUAL vs MEMBER: Nº OF RIDES AND RIDE_DURATION BY MONTHS)","metadata":{"papermill":{"duration":0.025824,"end_time":"2025-07-28T18:12:06.349622","exception":false,"start_time":"2025-07-28T18:12:06.323798","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# CHECK HOW THE PERCENTAGE OF CASUAL RIDES VS. MEMBERS EVOLVES OVER THE MONTHS\nggplot(obs2, aes(x = month, y = percent_num_rides, fill = member_casual)) + \n    geom_col() +\n    scale_fill_manual(values = c(\"member\" = \"#1f78b4\", \"casual\" = \"orange\")) +\n    labs(title = \"% of rides by User Type per month\",\n         x = \"Month\", y = NULL, fill = \"User type\") +  # y = NULL per treure etiqueta de l'eix Y\n    geom_text(aes(label = percent_num_rides), position = position_stack(vjust = 0.5), \n              color = \"black\", size = 3) +\n    theme_minimal() +\n    theme(\n      axis.text.x = element_text(angle = 45, hjust = 1),\n      axis.text.y = element_blank(),    \n      axis.ticks.y = element_blank(),    \n      panel.grid.major.y = element_blank(), \n      panel.grid.minor.y = element_blank(), \n      panel.background = element_rect(fill = \"white\", color = NA), \n      plot.background = element_rect(fill = \"white\", color = NA))\n\n# CHECK THE TREND IN THE NUMBER OF RIDES MADE OVER THE MONTHS\nggplot(obs2, aes(x = month, y = total_rides, color = member_casual, group = member_casual)) + \n  geom_line(linewidth = 1) +\n  geom_point(size = 2) +\n  scale_color_manual(values = c(\"member\" = \"#1f78b4\", \"casual\" = \"orange\")) +\n  labs(title = \"Rides distribution in one year by user type\") +\n  theme_minimal()","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:12:06.404109Z","iopub.status.busy":"2025-07-28T18:12:06.402571Z","iopub.status.idle":"2025-07-28T18:12:07.003637Z","shell.execute_reply":"2025-07-28T18:12:07.001683Z"},"jupyter":{"source_hidden":true},"papermill":{"duration":0.631212,"end_time":"2025-07-28T18:12:07.006333","exception":false,"start_time":"2025-07-28T18:12:06.375121","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**FINDING 2.1:** As we saw in Finding 1, the trend that members make more trips than casual users continues throughout the different months.<br>\nHowever, we see that in the summer months (June-September), the difference in trips between members and casual users decreases. We can assume that casual users use the bikes for leisure, which is why they increase their trips during the summer/vacation period.\n<br><br>\n**FINDING 2.2:** There is a clear trend toward lower use of the service during the winter months. Although this study did not take into account weather data for the period studied, it can be concluded that all users prefer to use bicycles in the warmer months. <br><br>\nTherefore, seasonality is a factor to consider in user behavior.","metadata":{"papermill":{"duration":0.029322,"end_time":"2025-07-28T18:12:07.06479","exception":false,"start_time":"2025-07-28T18:12:07.035468","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"### 6.3: FINDING 3 (CASUAL vs MEMBER: Nº OF RIDES AND RIDE_DURATION BY DAYS OF THE WEEK)","metadata":{"papermill":{"duration":0.028554,"end_time":"2025-07-28T18:12:07.122538","exception":false,"start_time":"2025-07-28T18:12:07.093984","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# CHECK THE TREND IN THE NUMBER OF RIDES MADE OVER THE WEEK\nggplot(obs3, aes(x = day_of_week, y = total_rides, fill = member_casual)) + \n  geom_col(position = \"dodge\") +\n  scale_fill_manual(values = c(\"member\" = \"#1f78b4\", \"casual\" = \"orange\")) +\n  labs(title = \"Nº of rides per day of the week and user type\") +\n  theme_minimal() + theme(axis.text.x = element_text(angle = 25, hjust = 1))","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:12:07.182934Z","iopub.status.busy":"2025-07-28T18:12:07.181321Z","iopub.status.idle":"2025-07-28T18:12:07.438637Z","shell.execute_reply":"2025-07-28T18:12:07.436791Z"},"jupyter":{"source_hidden":true},"papermill":{"duration":0.290059,"end_time":"2025-07-28T18:12:07.440835","exception":false,"start_time":"2025-07-28T18:12:07.150776","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**FINDING 3:** We see that casual users increase their trips on weekends, which reinforces the idea in Finding 2.1 that casual users prefer to use the service in their free time. \n<br> On the other hand, members use the service more on weekdays, so we can assume that a large part of their trips are for commuting to work.","metadata":{"papermill":{"duration":0.029977,"end_time":"2025-07-28T18:12:07.500192","exception":false,"start_time":"2025-07-28T18:12:07.470215","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"### 6.4: FINDING 4 (CASUAL vs MEMBER: Nº OF RIDES AND RIDE_DURATION BY HOURS OF THE DAY)","metadata":{"papermill":{"duration":0.02973,"end_time":"2025-07-28T18:12:07.559991","exception":false,"start_time":"2025-07-28T18:12:07.530261","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# CHECK THE TREND IN THE NUMBER OF RIDES MADE OVER THE DAY\nggplot(obs4, aes(x = start_hour, y = total_rides, fill = member_casual)) + \n  geom_col(position = \"dodge\") +\n  scale_fill_manual(values = c(\"member\" = \"#1f78b4\", \"casual\" = \"orange\")) +\n  labs(title = \"Nº of rides in one day divided per hours\") +\n  theme_minimal() + theme(axis.text.x = element_text(angle = 25, hjust = 1))\n\n# CHECK THE AVERAGE OF RIDE DURATION ALONG ONE DAY\nggplot(obs4, aes(x = start_hour, y = avg_ride_time_min, fill = member_casual)) + \n  geom_col(position = \"dodge\") +\n  scale_fill_manual(values = c(\"member\" = \"#1f78b4\", \"casual\" = \"orange\")) +\n  labs(title = \"Average of ride duration in one day\") +\n  theme_minimal() + theme(axis.text.x = element_text(angle = 25, hjust = 1))","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:12:07.622691Z","iopub.status.busy":"2025-07-28T18:12:07.621142Z","iopub.status.idle":"2025-07-28T18:12:08.490331Z","shell.execute_reply":"2025-07-28T18:12:08.488556Z"},"jupyter":{"source_hidden":true},"papermill":{"duration":0.903188,"end_time":"2025-07-28T18:12:08.492694","exception":false,"start_time":"2025-07-28T18:12:07.589506","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**FINDING 4.1:** It can be seen that during peak hours for commuting to and from work (7-9 a.m. and 4-6 p.m.), members make more trips. We can confirm that a large part of the use of the bicycle service by members is for commuting to work. We also see that casual users peak is in the afternoon, around the time people leave work.<br><br>\n**FINDING 4.2:** While members' trips are similar in length throughout the day, casual users make longer trips in the morning. Normally, people work in the morning and cannot spend much time. In this case, we can assume that casual users who use bicycles in the morning do not work and therefore have more time for leisure","metadata":{"papermill":{"duration":0.032624,"end_time":"2025-07-28T18:12:08.557163","exception":false,"start_time":"2025-07-28T18:12:08.524539","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"### 6.5: FINDING 5 (CASUAL vs MEMBER: TYPE OF BIKES)","metadata":{"papermill":{"duration":0.031463,"end_time":"2025-07-28T18:12:08.620284","exception":false,"start_time":"2025-07-28T18:12:08.588821","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# CHECK WHICH TYPE OF BIKE THE USERS PREFER\nobs5_member <- obs5 %>% filter(member_casual == \"member\")\nobs5_casual <- obs5 %>% filter(member_casual == \"casual\")\n\nggplot(obs5_member, aes(x = \"\", y = total_rides, fill = rideable_type)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(\"y\") +\n  geom_text(aes(label = paste0(round((total_rides / sum(total_rides)) * 100, 1), \"%\")),\n            position = position_stack(vjust = 0.5),\n            color = \"black\", size = 5) +\n  scale_fill_manual(values = c(\"classic_bike\" = \"#A3A380\", \n                               \"electric_bike\" = \"#D6A2AD\", \n                               \"electric_scooter\" = \"#E0C097\")) +\n  labs(title = \"Use of different types of bikes by MEMBER USERS\") +\n  theme_void()\n\nggplot(obs5_casual, aes(x = \"\", y = total_rides, fill = rideable_type)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(\"y\") +\n  geom_text(aes(label = paste0(round((total_rides / sum(total_rides)) * 100, 1), \"%\")),\n            position = position_stack(vjust = 0.5),\n            color = \"black\", size = 5) +\n  scale_fill_manual(values = c(\"classic_bike\" = \"#A3A380\", \n                               \"electric_bike\" = \"#D6A2AD\", \n                               \"electric_scooter\" = \"#E0C097\")) +\n  labs(title = \"Use of different types of bikes by CASUAL USERS\") +\n  theme_void()","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:12:08.686184Z","iopub.status.busy":"2025-07-28T18:12:08.684609Z","iopub.status.idle":"2025-07-28T18:12:09.228171Z","shell.execute_reply":"2025-07-28T18:12:09.226373Z"},"jupyter":{"source_hidden":true},"papermill":{"duration":0.578584,"end_time":"2025-07-28T18:12:09.230444","exception":false,"start_time":"2025-07-28T18:12:08.65186","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**FINDING 5:** The preferred type of bicycle follows the same pattern for members as for casual users. In both cases, there is a general preference for classic bicycles.","metadata":{"papermill":{"duration":0.033448,"end_time":"2025-07-28T18:12:09.297246","exception":false,"start_time":"2025-07-28T18:12:09.263798","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"### 6.6: FINDING 6 (CASUAL vs MEMBER: TYPE OF BIKES BY MONTH)","metadata":{"papermill":{"duration":0.033026,"end_time":"2025-07-28T18:12:09.363625","exception":false,"start_time":"2025-07-28T18:12:09.330599","status":"completed"},"tags":[]}},{"cell_type":"code","source":"#CHECK TYPE OF BIKE THE USERS PREFER ACCORDING TO THE MONTH\nobs6_member <- obs6 %>% filter(member_casual == \"member\") %>%\n  mutate(percent_type_bike_month = as.numeric(gsub(\"%\", \"\", percent_type_bike_month)))\nobs6_casual <- obs6 %>% filter(member_casual == \"casual\") %>%\n  mutate(percent_type_bike_month = as.numeric(gsub(\"%\", \"\", percent_type_bike_month)))\n\nggplot(obs6_casual, aes(x = month, y = percent_type_bike_month, fill = rideable_type)) + \n  geom_col() +\n  scale_fill_manual(values = c(\"classic_bike\" = \"#A3A380\", \n                               \"electric_bike\" = \"#D6A2AD\", \n                               \"electric_scooter\" = \"#E0C097\")) +\n  labs(title = \"Comparison of the type of bike used over the course of a year - CASUAL USERS\",\n       x = \"Month\", y = NULL, fill = \"Rideable Type\") + \n  geom_text(aes(label = paste0(percent_type_bike_month, \"%\")), position = position_stack(vjust = 0.5), \n            color = \"black\", size = 3) + ylim(0, 100) + \n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.text.y = element_blank(),    \n    axis.ticks.y = element_blank(),    \n    panel.grid.major.y = element_blank(), \n    panel.grid.minor.y = element_blank(), \n    panel.background = element_rect(fill = \"white\", color = NA), \n    plot.background = element_rect(fill = \"white\", color = NA)\n  )\n\nggplot(obs6_member, aes(x = month, y = percent_type_bike_month, fill = rideable_type)) + \n    geom_col() +\n    scale_fill_manual(values = c(\"classic_bike\" = \"#A3A380\", \n                                 \"electric_bike\" = \"#D6A2AD\", \n                                 \"electric_scooter\" = \"#E0C097\")) +\n    labs(title = \"Comparison of the type of bike used over the course of a year - MEMBER USERS\",\n         x = \"Month\", y = NULL, fill = \"Rideable Type\") +  \n    geom_text(aes(label = paste0(percent_type_bike_month, \"%\")), position = position_stack(vjust = 0.5), \n              color = \"black\", size = 3) + ylim(0, 100) + \n    theme_minimal() +\n    theme(\n      axis.text.x = element_text(angle = 45, hjust = 1),\n      axis.text.y = element_blank(),    \n      axis.ticks.y = element_blank(),    \n      panel.grid.major.y = element_blank(), \n      panel.grid.minor.y = element_blank(), \n      panel.background = element_rect(fill = \"white\", color = NA), \n      plot.background = element_rect(fill = \"white\", color = NA)   \n    )","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:12:09.433321Z","iopub.status.busy":"2025-07-28T18:12:09.431757Z","iopub.status.idle":"2025-07-28T18:12:10.48467Z","shell.execute_reply":"2025-07-28T18:12:10.481949Z"},"jupyter":{"source_hidden":true},"papermill":{"duration":1.091432,"end_time":"2025-07-28T18:12:10.487836","exception":false,"start_time":"2025-07-28T18:12:09.396404","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**FINDING 7:** For both types of users, it has been observed that the use of classic bicycles increases during the summer months. <br> In particular, casual users prefer to use electric bicycles rather than classic bicycles during the winter months.","metadata":{"papermill":{"duration":0.037699,"end_time":"2025-07-28T18:12:10.561094","exception":false,"start_time":"2025-07-28T18:12:10.523395","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"### 6.7: FINDING 7 (CHECK OUT THE 10 MOST POPULAR STATIONS BY TYPE OF USERS)","metadata":{"papermill":{"duration":0.036534,"end_time":"2025-07-28T18:12:10.634294","exception":false,"start_time":"2025-07-28T18:12:10.59776","status":"completed"},"tags":[]}},{"cell_type":"code","source":"#CHECK THE LOCATION OF THE MOST POPULAR STATIONS BY TYPE OF USER\nleaflet(obs7) %>%\n  addTiles() %>%\n  addCircleMarkers(\n    lng = ~start_longitude,\n    lat = ~start_latitude,\n    radius = 10,  \n    color = ~ifelse(member_casual == \"member\", \"#1f78b4\", \"orange\"),\n    stroke = FALSE,\n    fillOpacity = 0.7,\n    popup = ~paste0(\"<b>\", start_station_name, \"</b><br>\",\n                    \"Usuari: \", member_casual, \"<br>\",\n                    \"Viatges: \", total_rides)\n  ) %>%\n  addLegend(\n    \"bottomright\",\n    colors = c(\"#1f78b4\", \"orange\"),\n    labels = c(\"Member\", \"Casual\"),\n    title = \"User Type\"\n  )","metadata":{"execution":{"iopub.execute_input":"2025-07-28T18:12:10.709657Z","iopub.status.busy":"2025-07-28T18:12:10.708091Z","iopub.status.idle":"2025-07-28T18:12:10.863265Z","shell.execute_reply":"2025-07-28T18:12:10.860489Z"},"jupyter":{"source_hidden":true},"papermill":{"duration":0.203714,"end_time":"2025-07-28T18:12:10.873794","exception":false,"start_time":"2025-07-28T18:12:10.67008","status":"completed"},"tags":[]},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**FINDING 7:** There is a difference in the stations most frequently used by casual users and members. <br>\nCasual users frequent tourist stations near Lake Michigan, indicating that their trips are more leisure-oriented. <br> In contrast, the stations most frequently used by members are located in residential and business areas (Loop, River North, West Loop, Hyde Park).","metadata":{"papermill":{"duration":0.048223,"end_time":"2025-07-28T18:12:10.970986","exception":false,"start_time":"2025-07-28T18:12:10.922763","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"## 7. ACT","metadata":{"papermill":{"duration":0.048443,"end_time":"2025-07-28T18:12:11.068439","exception":false,"start_time":"2025-07-28T18:12:11.019996","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<u>Based on our findings, we have observed the following patterns for members and casual users:</u>\n+ Casual users tend to take longer trips than members.\n+ Members users tend to take more trips.\n+ Members tend to use the service on weekdays and during peak hours when commuting to work, university, etc. They mainly use the service for work-related travel.\n+ Casual users tend to use the service more on weekends.They mainly use the service for leisure-related travel.\n+ There is seasonality: During the summer months, the number of trips made by both members and casual users increases.\n+ During the summer months, the difference between the number of trips made by members and casual users decreases, as casual trips increase.\n+ In general, both types of users prefer to use classic bicycles.\nHowever, during the winter months, casual users prefer electric bicycles.\n+ There is a difference between the most frequently used stations: The stations most frequently used by members are located near business and residential areas. The stations most frequently used by casual users are located near Lake Michigan.","metadata":{"papermill":{"duration":0.048782,"end_time":"2025-07-28T18:12:11.166743","exception":false,"start_time":"2025-07-28T18:12:11.117961","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"After analysis, we can make the following recommendations to help Cyclistic attract casual users to become members.<br>\n\n<span style=\"color:\t#000080; font-weight:bold; font-size:17px\">\nRECOMMENDATIONS\n</span> <br><br>\n\n<span style=\"color:\t#000080; font-weight:bold; font-size:16px\">\n1. \n</span> \n<span style=\"color:#000000; font-weight:normal; font-size:16px\">June through September are the busiest months for visitors to Chicago, with numerous events and festivals.\nSpecial plans can be promoted during this time, such as weekly, monthly, or quarterly memberships.</span><br><br>\n\n<span style=\"color:\t#000080; font-weight:bold; font-size:16px\">\n2. \n</span> \n<span style=\"color:#000000; font-weight:normal; font-size:16px\">Casual users make longer journeys. A cheaper price can be offered for long rides for members. This may encourage casual users to become members. </span><br><br>\n\n<span style=\"color:\t#000080; font-weight:bold; font-size:16px\">\n3. \n</span> \n<span style=\"color:#000000; font-weight:normal; font-size:16px\">Casual users tend to use the service for leisure, especially on weekends. Offering them the possibility of a free one- or two-day weekend pass in exchange for becoming members could be a strategic way to convert casual users into members. </span><br><br>\n\n<span style=\"color:\t#000080; font-weight:bold; font-size:16px\">\n4. \n</span> \n<span style=\"color:#000000; font-weight:normal; font-size:16px\">To achieve greater engagement from casual users, the marketing team could launch a campaign offering a discount on the price of electric bikes in exchange for a membership subscription during the winter months.</span><br><br>\n\n<span style=\"color:\t#000080; font-weight:bold; font-size:16px\">\n5.\n</span> \n<span style=\"color:#000000; font-weight:normal; font-size:16px\">Although the goal is to try to convert as many casual users as possible into members, Cyclistic can also try to maximize the number of new casual user registrations. To achieve this, campaigns at the 10 most frequented stations can be runed.</span>","metadata":{"papermill":{"duration":0.049055,"end_time":"2025-07-28T18:12:11.264543","exception":false,"start_time":"2025-07-28T18:12:11.215488","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<u>Additional data that could broaden the scope of the analysis:</u> <br>\n+  User personal data such as gender and age. It could be interesting to explore whether there are age groups where users tend to be more casual than members. It could also be studied whether men and women follow the same pattern in choosing to be members or casual users, or whether there is a difference. This could help to create marketing campaigns focused on a specific target audience.\n+  Address/neighborhood of members. It could be interesting to investigate whether there are specific parameters for each location that encourage membership.\n+  Environmental factors. It could be interesting to study, for example, the usage pattern among members and casual users on rainy days.","metadata":{"papermill":{"duration":0.048821,"end_time":"2025-07-28T18:12:11.362019","exception":false,"start_time":"2025-07-28T18:12:11.313198","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"\nIn conclusion, all steps have been followed to obtain the analysis results. Based on these results, recommendations have been formulated to help the marketing team create new strategies to convert casual users into members.","metadata":{"papermill":{"duration":0.049284,"end_time":"2025-07-28T18:12:11.459997","exception":false,"start_time":"2025-07-28T18:12:11.410713","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<span style=\"color:#4682B4; font-weight:bold; font-size:15px\">\nThank you very much for taking the time to read this notebook\n</span>","metadata":{"papermill":{"duration":0.05174,"end_time":"2025-07-28T18:12:11.561314","exception":false,"start_time":"2025-07-28T18:12:11.509574","status":"completed"},"tags":[]}}]}